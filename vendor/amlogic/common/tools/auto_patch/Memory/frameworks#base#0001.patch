From 3f44b8ddedd255aa9f01bae1b54dc0f021a0fdbd Mon Sep 17 00:00:00 2001
From: "qingwei.xu" <qingwei.xu@amlogic.com>
Date: Thu, 28 Nov 2019 14:06:21 +0800
Subject: Subject: mm: fix vmalloc used count not accurate
 problem [1/1]

PD#SWPL-17000

Problem:
dumpsys count vmalloc used memory is not accurate.

Solution:
Only count items with "pages=" in /proc/vmallocinfo.
They are real mapped pages.

Verify:
x301

Change-Id: I39c68c286e58bde2ce5d20e356503bb7b119a1f7
Signed-off-by: qingwei.xu <qingwei.xu@amlogic.com>
---
 core/java/android/os/Debug.java               |  4 +++-
 .../android/internal/util/MemInfoReader.java  |  2 +-
 core/jni/android_os_Debug.cpp                 | 21 +++++++++++++++----
 3 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/core/java/android/os/Debug.java b/core/java/android/os/Debug.java
index e6069644caa..a0ad6a942b8 100644
--- a/core/java/android/os/Debug.java
+++ b/core/java/android/os/Debug.java
@@ -1791,7 +1791,9 @@ public final class Debug
     /** @hide */
     public static final int MEMINFO_KERNEL_STACK = 14;
     /** @hide */
-    public static final int MEMINFO_COUNT = 15;
+    public static final int MEMINFO_DRIVER_CMA = 15;
+    /** @hide */
+    public static final int MEMINFO_COUNT = 16;
 
     /**
      * Retrieves /proc/meminfo.  outSizes is filled with fields
diff --git a/core/java/com/android/internal/util/MemInfoReader.java b/core/java/com/android/internal/util/MemInfoReader.java
index 8d7166679b7..e0bbc2071da 100644
--- a/core/java/com/android/internal/util/MemInfoReader.java
+++ b/core/java/com/android/internal/util/MemInfoReader.java
@@ -92,7 +92,7 @@ public final class MemInfoReader {
     public long getKernelUsedSizeKb() {
         return mInfos[Debug.MEMINFO_SHMEM] + mInfos[Debug.MEMINFO_SLAB_UNRECLAIMABLE]
                 + mInfos[Debug.MEMINFO_VM_ALLOC_USED] + mInfos[Debug.MEMINFO_PAGE_TABLES]
-                + mInfos[Debug.MEMINFO_KERNEL_STACK];
+                + mInfos[Debug.MEMINFO_KERNEL_STACK] + mInfos[Debug.MEMINFO_DRIVER_CMA];
     }
 
     public long getSwapTotalSizeKb() {
diff --git a/core/jni/android_os_Debug.cpp b/core/jni/android_os_Debug.cpp
index bf183cc8c0a..c4895b5a43a 100644
--- a/core/jni/android_os_Debug.cpp
+++ b/core/jni/android_os_Debug.cpp
@@ -703,7 +703,7 @@ static long get_allocated_vmalloc_memory() {
             "vm_map_ram",
             NULL
     };
-    long size, vmalloc_allocated_size = 0;
+    long nr_pages, vmalloc_allocated_size = 0;
 
     UniqueFile fp = MakeUniqueFile("/proc/vmallocinfo", "re");
     if (fp == nullptr) {
@@ -723,10 +723,20 @@ static long get_allocated_vmalloc_memory() {
             }
             i++;
         }
-        if (valid_line && (sscanf(line, "%*x-%*x %ld", &size) == 1)) {
-            vmalloc_allocated_size += size;
+        // check to see if there are pages mapped in vmalloc area
+        if (!strstr(line, "pages=")) {
+            continue;
+        }
+
+        if (sscanf(line, "%*x-%*x %*ld %*s pages=%ld", &nr_pages) == 1) {
+            /* driver allocated */
+            vmalloc_allocated_size += (nr_pages * getpagesize());
+        } else if(sscanf(line, "%*x-%*x %*ld %*s %*s pages=%ld", &nr_pages) == 1) {
+            /* module allocated, one more %*s */
+            vmalloc_allocated_size += (nr_pages * getpagesize());
         }
     }
+    ALOGW("real vmalloc_allocated_size:%ld\n", vmalloc_allocated_size);
     return vmalloc_allocated_size;
 }
 
@@ -746,6 +756,7 @@ enum {
     MEMINFO_VMALLOC_USED,
     MEMINFO_PAGE_TABLES,
     MEMINFO_KERNEL_STACK,
+    MEMINFO_DRIVER_CMA,
     MEMINFO_COUNT
 };
 
@@ -819,6 +830,7 @@ static void android_os_Debug_getMemInfo(JNIEnv *env, jobject clazz, jlongArray o
             "VmallocUsed:",
             "PageTables:",
             "KernelStack:",
+            "DriverCma:",
             NULL
     };
     static const int tagsLen[] = {
@@ -837,9 +849,10 @@ static void android_os_Debug_getMemInfo(JNIEnv *env, jobject clazz, jlongArray o
             12,
             11,
             12,
+            10,
             0
     };
-    long mem[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+    long mem[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 
     char* p = buffer;
     while (*p && numFound < (sizeof(tagsLen) / sizeof(tagsLen[0]))) {
-- 
2.24.0

