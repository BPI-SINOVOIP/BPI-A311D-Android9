From 63d518e15a6ebb0b5a2c9c20a072b3118a8b0f5e Mon Sep 17 00:00:00 2001
From: "rongjun.chen" <rongjun.chen@amlogic.com>
Date: Fri, 21 Aug 2020 20:25:34 +0800
Subject: [PATCH] wifi: Wifi will connect slowly [1/1]

PD#SWPL-30818

Problem:
connects to Wifi,do STR 100times ,
Wifi will connect slowly (sometimes,3-4 minutes to connect)

Solution:
When disconnect, reduce the scanning frequency

Verify:
verified by x301

Change-Id: I82aea884e84f39faa3d48b6bef58884bcf0003ab
Signed-off-by: lijun.meng <lijun.meng@amlogic.com>
---
 .../server/wifi/WifiConnectivityManager.java  | 20 ++++++++++++-------
 1 file changed, 13 insertions(+), 7 deletions(-)

diff --git a/service/java/com/android/server/wifi/WifiConnectivityManager.java b/service/java/com/android/server/wifi/WifiConnectivityManager.java
index d10d80013..1651f8062 100644
--- a/service/java/com/android/server/wifi/WifiConnectivityManager.java
+++ b/service/java/com/android/server/wifi/WifiConnectivityManager.java
@@ -834,10 +834,10 @@ public class WifiConnectivityManager {
     // Start a single scan and set up the interval for next single scan.
     private void startPeriodicSingleScan() {
         long currentTimeStamp = mClock.getElapsedSinceBootMillis();
-
+	List<WifiConfiguration> savedNetworks = mConfigManager.getSavedNetworks();
         if (mLastPeriodicSingleScanTimeStamp != RESET_TIME_STAMP) {
             long msSinceLastScan = currentTimeStamp - mLastPeriodicSingleScanTimeStamp;
-            if (msSinceLastScan < PERIODIC_SCAN_INTERVAL_MS) {
+            if (msSinceLastScan < PERIODIC_SCAN_INTERVAL_MS && !(savedNetworks.size() > 0 && mWifiState == WIFI_STATE_DISCONNECTED)) {
                 localLog("Last periodic single scan started " + msSinceLastScan
                         + "ms ago, defer this new scan request.");
                 schedulePeriodicScanTimer(PERIODIC_SCAN_INTERVAL_MS - (int) msSinceLastScan);
@@ -863,16 +863,22 @@ public class WifiConnectivityManager {
                 isFullBandScan = false;
             }
         }
-
         if (isScanNeeded) {
             mLastPeriodicSingleScanTimeStamp = currentTimeStamp;
             startSingleScan(isFullBandScan, WIFI_WORK_SOURCE);
+            if (savedNetworks.size() > 0 && mWifiState == WIFI_STATE_DISCONNECTED) {
+		mPeriodicSingleScanInterval= 3000;
+            }
             schedulePeriodicScanTimer(mPeriodicSingleScanInterval);
 
             // Set up the next scan interval in an exponential backoff fashion.
-            mPeriodicSingleScanInterval *= 2;
-            if (mPeriodicSingleScanInterval >  MAX_PERIODIC_SCAN_INTERVAL_MS) {
-                mPeriodicSingleScanInterval = MAX_PERIODIC_SCAN_INTERVAL_MS;
+            if (savedNetworks.size() > 0 && mWifiState == WIFI_STATE_DISCONNECTED)
+                mPeriodicSingleScanInterval = 3000;
+            else {
+                mPeriodicSingleScanInterval *= 2;
+                if (mPeriodicSingleScanInterval >  MAX_PERIODIC_SCAN_INTERVAL_MS) {
+                    mPeriodicSingleScanInterval = MAX_PERIODIC_SCAN_INTERVAL_MS;
+                }
             }
         } else {
             // Since we already skipped this scan, keep the same scan interval for next scan.
@@ -930,7 +936,7 @@ public class WifiConnectivityManager {
     // Start a periodic scan when screen is on
     private void startPeriodicScan(boolean scanImmediately) {
         mPnoScanListener.resetLowRssiNetworkRetryDelay();
-
+	 List<WifiConfiguration> savedNetworks = mConfigManager.getSavedNetworks();
         // No connectivity scan if auto roaming is disabled.
         if (mWifiState == WIFI_STATE_CONNECTED && !mEnableAutoJoinWhenAssociated) {
             return;
-- 
2.28.0

